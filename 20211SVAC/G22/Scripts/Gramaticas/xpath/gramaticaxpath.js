/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaxpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,20],$Va=[5,6],$Vb=[5,6,12,13,15,17,20,23,24,25,26,27,46,50,51,53,54,55,56,57,58,60,62,63,66,69],$Vc=[1,26],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[1,42],$Vs=[1,46],$Vt=[1,48],$Vu=[1,51],$Vv=[1,50],$Vw=[5,6,12,13,15,17,20,23,24,25,26,27,44,46,50,51,53,54,55,56,57,58,60,62,63,66,69],$Vx=[1,65],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,66],$VC=[46,50,51],$VD=[1,75],$VE=[1,76],$VF=[46,50,51,53,54,55,56,57,58,60,62,69],$VG=[1,83],$VH=[46,50,51,53,54,55,56,57,58,60,62,63,69],$VI=[1,84],$VJ=[1,85],$VK=[20,46,50,51,53,54,55,56,57,58,60,62,63,66,69],$VL=[2,12,13,15,17,18,23,24,25,26,27,30,31,32,33,34,35,36,37,38,39,40,41,68,70,71,72];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"S":3,"RUTAS":4,"EOF":5,"concatenacion":6,"CONSULTAS":7,"CONSULTA":8,"diagonales":9,"DIAGONALES":10,"TIPO_ID":11,"punto":12,"dosPuntos":13,"FUNCION":14,"diagonalDoble":15,"SIMBOLOS":16,"diagonal":17,"arroba":18,"SIGUIENTE_ARROBA":19,"asterisco":20,"dosPuntosConsecutivos":21,"METODOS":22,"identificador":23,"funcionNode":24,"funcionText":25,"funcionLast":26,"funcionPosition":27,"PALABRA_RESERVADA":28,"SIGUIENTE_METODO":29,"ancestor1":30,"ancestor_or_self1":31,"attribute1":32,"child1":33,"descendant1":34,"descendant_or_self1":35,"following1":36,"following_sibling1":37,"parent1":38,"preceding1":39,"preceding_sibling1":40,"self1":41,"ARREGLOS_ID":42,"ARREGLO_ID":43,"corcheteAbierto":44,"OPERACIONES_ARREGLO":45,"corcheteCerrado":46,"OPERACION_LOGICA":47,"OPERACION_RELACIONAL":48,"SIMBOLOS_LOGICOS":49,"and1":50,"or1":51,"SIMBOLOS_RELACIONALES":52,"mayorque":53,"menorque":54,"mayorIgual":55,"menorIgual":56,"igual":57,"diferenteQue":58,"OPERACION_ARITMETICA":59,"mas":60,"T1":61,"menos":62,"modulo":63,"T":64,"F":65,"dividir":66,"TIPOIGUALAR":67,"parizq":68,"parder":69,"entero":70,"decimal":71,"cadena":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"concatenacion",9:"diagonales",12:"punto",13:"dosPuntos",15:"diagonalDoble",17:"diagonal",18:"arroba",20:"asterisco",21:"dosPuntosConsecutivos",23:"identificador",24:"funcionNode",25:"funcionText",26:"funcionLast",27:"funcionPosition",30:"ancestor1",31:"ancestor_or_self1",32:"attribute1",33:"child1",34:"descendant1",35:"descendant_or_self1",36:"following1",37:"following_sibling1",38:"parent1",39:"preceding1",40:"preceding_sibling1",41:"self1",44:"corcheteAbierto",46:"corcheteCerrado",50:"and1",51:"or1",53:"mayorque",54:"menorque",55:"mayorIgual",56:"menorIgual",57:"igual",58:"diferenteQue",60:"mas",62:"menos",63:"modulo",66:"dividir",68:"parizq",69:"parder",70:"entero",71:"decimal",72:"cadena"},
productions_: [0,[3,2],[3,1],[4,3],[4,1],[7,2],[7,1],[7,2],[8,1],[8,1],[8,1],[8,1],[8,1],[10,2],[10,2],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[19,1],[19,1],[14,1],[14,1],[14,1],[14,1],[22,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[29,1],[29,1],[29,1],[29,1],[29,1],[11,1],[11,2],[42,2],[42,1],[43,3],[45,1],[45,1],[47,3],[49,1],[49,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[59,3],[59,3],[59,1],[61,3],[61,1],[64,3],[64,3],[64,1],[65,1],[65,3],[67,1],[67,1],[67,2],[67,1],[67,1],[67,1],[48,3],[48,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
			//AST
		this.$[1]=$$[$0-1][1];

		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'S'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0-1][2]+';'+'\n}';
		//reglas semanticas
		//this.$[0] = $$[$0-1][0]; 
		var regla = new Regla("GRAMATICAL","S-> RUTAS EOF",""); ingresarRegla(regla);
		console.log("DOT:",yy.dotAST+'}');
		console.log('-------------------------');
		console.log("DOT:",yy.dotAST+'}');
		unirErrores();
		this.$ = $$[$0-1][0]; 
		return this.$; 
	
break;
case 2:
 
			console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			var error =  new Error( this._$.first_line ,  this._$.first_column, 'sintactico','xmldesc', yytext);
			erroresSintacticos.push(error); unirErrores(); 
	
break;
case 3:
 	
		//AST
		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+$$[$0-1].yytext+'"];'+'\n'; 
		yy.dotAST += padre+'--'+$$[$0-2][1]+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;
		//CST
		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'RUTAS'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'concatenacion'+'"];'+'\n'; 
		var hijo2 =++yy.idCST;
		yy.dotCST+= hijo2+' [label="'+$$[$0-1].yy.text+'"];'+'\n'; 
		yy.dotCST += padre+'--'+$$[$0-2][2]+';'+'\n';
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';
		this.$[2]=padre;
		//REGLAS SEMANTICAS	 
		//$$[$0-2][0].push($$[$0][0]); 
		//this.$[0] = $$[$0-2][0];
		$$[$0-2][0].push($$[$0][0]); 
		this.$[0] = $$[$0-2][0];
		var regla = new Regla("GRAMATICAL","RUTAS-> RUTAS concatenacion CONSULTAS",""); ingresarRegla(regla);
		
break;
case 4:

			//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'RUTAS'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0] = [$$[$0][0]];
		var regla = new Regla("GRAMATICAL","RUTAS-> CONSULTAS",""); ingresarRegla(regla);
		
break;
case 5:
 	
		//AST
		var padre=  yy.idAST+' [label="'+'CONSULTAS'+'"];'+'\n'; 
		yy.dotAST+= padre+' [label="'+$$[$0-1][1]+'"];'+'\n'; 
		yy.dotAST+= padre+' [label="'+$$[$0][1]+'"];'+'\n'; 
		this.$[1]=padre;
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'CONSULTAS'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0-1][2]+';'+'\n';
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		//reglas gram
		$$[$0-1][0].push($$[$0][0]); 
		this.$[0] = $$[$0-1][0];
		var regla = new Regla("GRAMATICAL","CONSULTA-> CONSULTAS CONSULTA",""); ingresarRegla(regla);
		
break;
case 6:

			//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'CONSULTAS'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0] = [$$[$0][0]];
		var regla = new Regla("GRAMATICAL","CONSULTA-> CONSULTA",""); ingresarRegla(regla);
		
break;
case 7:

			console.error('Este es un error Sintactico: ' + yytext + ', en la linea: ' + _$[$0-1].first_line + ', en la columna: ' + _$[$0-1].first_column); 
			var erroresSint = new Error(_$[$0-1].first_line, _$[$0-1].first_column , 'Lexico','XpathAscendente', " ");
			erroresSintacticos.push( erroresSint) ;
		
break;
case 8:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'CONSULTA'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		
		this.$[0]=$$[$0][0];
		var regla = new Regla("GRAMATICAL","CONSULTA-> DIAGONALES",""); ingresarRegla(regla);
	
break;
case 9:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'CONSULTA'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0]=$$[$0][0];
		var regla = new Regla("GRAMATICAL","CONSULTA-> TIPO_ID",""); ingresarRegla(regla);
	
break;
case 10:

		//AST
		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 
		//CST
		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.idCST+' [label="'+'CONSULTA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'punto'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new SimbolosXpath(TiposXpath.PUNTO,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","CONSULTA-> punto",""); ingresarRegla(regla);
	
break;
case 11:

		//AST
		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 
		//CST
		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.idCST+' [label="'+'CONSULTA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'dosPuntos'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new SimbolosXpath(TiposXpath.DOSPUNTOSCONSECUTIVOS,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","CONSULTA-> dosPuntos",""); ingresarRegla(regla);
	
break;
case 12:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'CONSULTA'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0]=$$[$0][0];
		var regla = new Regla("GRAMATICAL","CONSULTA-> FUNCION",""); ingresarRegla(regla);
	
break;
case 13:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'DIAGONALES'+'"];'+'\n'; 
		var hijo =++yy.idAST;
		yy.dotCST+= hijo+' [label="'+'//'+'"];'+'\n'; 

		yy.dotAST += padre+'--'+hijo+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'DIAGONALES'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'diagonalDoble'+'"];'+'\n'; 
		var hijo1 =++yy.idCST;
		yy.dotCST+= hijo1+' [label="'+$$[$0-1].yytext+'"];'+'\n'; 
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo1+';'+'\n';
		this.$[2]=padre;

		 this.$[0] = new diagonalDobleC($$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);
		var regla = new Regla("GRAMATICAL","DIAGONALES-> diagonalDoble SIMBOLOS","crear nodos AST;\n Crear nodos CST;\n Return newDiagonalDoble;"); ingresarRegla(regla);
	
break;
case 14:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'DIAGONALES'+'"];'+'\n'; 
		var hijo =++yy.idAST;
		yy.dotCST+= hijo+' [label="'+'/'+'"];'+'\n'; 

		yy.dotAST += padre+'--'+hijo+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'DIAGONALES'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'diagonal'+'"];'+'\n'; 
		var hijo1 =++yy.idCST;
		yy.dotCST+= hijo1+' [label="'+$$[$0-1].yytext+'"];'+'\n'; 
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo1+';'+'\n';
		this.$[2]=padre;

		 this.$[0] = new diagonalSimpleS($$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);
		var regla = new Regla("GRAMATICAL","DIAGONALES-> diagonal SIMBOLOS","crear nodos AST, crear nodos AST, retornar diagramas"); ingresarRegla(regla);
	
break;
case 15:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'SIMBOLOS'+'"];'+'\n'; 
		var hijo =++yy.idAST;
		yy.dotCST+= hijo+' [label="'+'arroba'+'"];'+'\n'; 

		yy.dotAST += padre+'--'+hijo+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'arroba'+'"];'+'\n'; 
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		this.$[2]=padre;

		 this.$[0] = new Arroba($$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column); 
		var regla = new Regla("GRAMATICAL","SIMBOLOS-> arroba SIGUIENTE_ARROBA",""); ingresarRegla(regla);
	
break;
case 16:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.padre+' [label="'+'SIMBOLOS'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'asterisco'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new SimbolosXpath(TiposXpath.ASTERISCO,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","SIMBOLOS-> asterisco",""); ingresarRegla(regla);
	
break;
case 17:
//antes debe de haber un /id/ o //id/ etc, sino error semantico{
		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.padre+' [label="'+'SIMBOLOS'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'dosPuntosConsecutivos'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new SimbolosXpath(TiposXpath.DOSPUNTOSCONSECUTIVOS,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","SIMBOLOS-> dosPuntosConsecutivos",""); ingresarRegla(regla);
	
break;
case 18:
//antes debe de haber un /id/  //id/ etc, sino error semantico{
		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'TIPO_ID'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0] = new SimbolosXpath(TiposXpath.PUNTO,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","SIMBOLOS-> punto",""); ingresarRegla(regla);
	
break;
case 19:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'TIPO_ID'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		this.$[0]=$$[$0][0];
		var regla = new Regla("GRAMATICAL","SIMBOLOS-> FUNCION",""); ingresarRegla(regla);
	
break;
case 20:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'TIPO_ID'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		this.$[0]=$$[$0][0];
		var regla = new Regla("GRAMATICAL","SIMBOLOS-> TIPO_ID",""); ingresarRegla(regla);
	
break;
case 21:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'TIPO_ID'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0]=$$[$0][0];
		var regla = new Regla("GRAMATICAL","SIMBOLOS-> TIPO_ID",""); ingresarRegla(regla);
	
break;
case 22:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 
		
		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIGUIENTE_ARROBA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'identificador'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		
		this.$[0] = new Dato(yytext, _$[$0].first_line, _$[$0].first_column); 
		var regla = new Regla("GRAMATICAL","SIGUIENTE_ARROBA-> identificador",""); ingresarRegla(regla);
	
break;
case 23:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIGUIENTE_ARROBA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'asterisco'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new SimbolosXpath(TiposXpath.ASTERISCO,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","SIGUIENTE_ARROBA-> asterisco",""); ingresarRegla(regla);
	
break;
case 24:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'FUNCION'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'funcionNode'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new Funcion(TiposXpath.FUNCION_NODE,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","FUNCION-> funcionNode",""); ingresarRegla(regla);
	
break;
case 25:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'FUNCION'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'funcionText'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new Funcion(TiposXpath.FUNCION_TEXT,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","FUNCION-> funcionText",""); ingresarRegla(regla);
	
break;
case 26:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'FUNCION'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'funcionLast'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new Funcion(TiposXpath.FUNCION_LAST,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","FUNCION-> funcionLast",""); ingresarRegla(regla);
	
break;
case 27:

		var regla = new Regla("GRAMATICAL","FUNCION-> funcionPosition",""); ingresarRegla(regla);
		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'FUNCION'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'funcionPosition'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new Funcion(TiposXpath.FUNCION_POSITION,_$[$0].first_line, _$[$0].first_column);
	
break;
case 28:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'::'+'"];'+'\n'; 
		yy.dotAST += padre+'--'+$$[$0-3][1]+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0-1][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'METODOS'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'mas'+'"];'+'\n'; 
		var hijo2 =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'::'+'"];'+'\n'; 
		yy.dotCST += padre+'--'+$$[$0-3][2]+';'+'\n';
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0-1][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';
		this.$[2]=padre;

		this.$[0] = new Metodo($$[$0-3][0],$$[$0][0],_$[$0-3].first_line, _$[$0-3].first_column);
		var regla = new Regla("GRAMATICAL","METODOS-> PALABRA_RESERVADA  dosPuntos dosPuntos SIGUIENTE_METODO",""); ingresarRegla(regla);
	
break;
case 29:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'ancestor1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0]=TiposXpath.METODO_ANCESTOR;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> ancestor1",""); ingresarRegla(regla);
	
break;
case 30:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'ancestor_or_self1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0] =TiposXpath.METODO_ANCESTOR_OR_SELF;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> ancestor_or_self1",""); ingresarRegla(regla);
	
break;
case 31:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'attribute1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0]=TiposXpath.METODO_ATRIBUTE;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> attribute1",""); ingresarRegla(regla);
	
break;
case 32:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'child1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0]=TiposXpath.METODO_CHILD;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> child1",""); ingresarRegla(regla);
	
break;
case 33:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'descendant1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0]=TiposXpath.METODO_DESCENDANT;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> descendant1",""); ingresarRegla(regla);
	
break;
case 34:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'descendant_or_self1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0] =TiposXpath.METODO_METODO_DESCENDANT_OR_SELF;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> following1",""); ingresarRegla(regla);
	
break;
case 35:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'following1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0]=TiposXpath.METODO_FOLLOWING;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> following1",""); ingresarRegla(regla);
	
break;
case 36:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'following_sibling1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0]=TiposXpath.METODO_FOLLOWING_SIGLING;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> following_sibling1",""); ingresarRegla(regla);
	
break;
case 37:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'parent1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0]=TiposXpath.METODO_PARENT;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> preceding1",""); ingresarRegla(regla);
	
break;
case 38:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'preceding1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0]=TiposXpath.METODO_PRECEDING;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> preceding1",""); ingresarRegla(regla);
	
break;
case 39:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'preceding_sibling1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0]=TiposXpath.METODO_PRECEDING_SIBLING;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> preceding_sibling1",""); ingresarRegla(regla);
	
break;
case 40:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'self1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0]=TiposXpath.METODO_SELF;
		var regla = new Regla("GRAMATICAL","PALABRA_RESERVADA-> self1",""); ingresarRegla(regla);
	
break;
case 41:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'FUNCION'+'"];'+'\n'; 
		
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		var regla = new Regla("GRAMATICAL","SIGUIENTE_METODO-> FUNCION",""); ingresarRegla(regla);
	
break;
case 42:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'SIGUIENTE_METODO'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0]=$$[$0][0];
		var regla = new Regla("GRAMATICAL","SIGUIENTE_METODO-> punto",""); ingresarRegla(regla);
	
break;
case 43:
//a partir de aqui verificar que sea logico para ver si se toma o no estas 3 producciones{
		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIGUIENTE_METODO'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'asterisco'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new SimbolosXpath(TiposXpath.ASTERISCO,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","SIGUIENTE_METODO-> punto",""); ingresarRegla(regla);
	
break;
case 44:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIGUIENTE_METODO'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'punto'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		
		this.$[0] = new SimbolosXpath(TiposXpath.PUNTO,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","SIGUIENTE_METODO-> punto","return nuevo tipoSImboloXPATH"); ingresarRegla(regla);
	
break;
case 45:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'$$ = new SimbolosXpath(TiposXpath.PUNTO,_$[$0].first_line, _$[$0].first_column);SIGUIENTE_METODO'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'dosPuntos'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new SimbolosXpath(TiposXpath.DOSPUNTOSCONSECUTIVOS,_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","SIGUIENTE_METODO-> dosPuntos",""); ingresarRegla(regla);
	
break;
case 46:
//bookstore{
		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'PALABRA_RESERVADA'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'identificador'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0] = new IdSimple($$[$0][0],_$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","ARREGLO_ID-> identificador","return idSimple"); ingresarRegla(regla);
	
break;
case 47:
 // booksotre[ operaciones ]{
		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'TIPO_ID'+'"];'+'\n'; 
		var hijo =++yy.idAST;
		yy.dotCST+= hijo+' [label="'+$$[$0-1].yytext+'"];'+'\n'; 

		yy.dotAST += padre+'--'+hijo+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'TIPO_ID'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'identificador'+'"];'+'\n'; 
		var hijo1 =++yy.idCST;
		yy.dotCST+= hijo1+' [label="'+$$[$0].yytext+'"];'+'\n'; 
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo1+';'+'\n';
		this.$[2]=padre;

		this.$[0] = new IdCompuesto($$[$0-1][0],$$[$0][0],_$[$0-1].first_line, _$[$0-1].first_column);
		var regla = new Regla("GRAMATICAL","ARREGLO_ID-> identificador ARREGLOS_ID",""); ingresarRegla(regla);
	
break;
case 48:

		//AST
		this.$[1]=$$[$0-1][1];
		//CST
		var padre=++yy.idCST;
		yy.dotCST+= padre+' [label="'+'ARREGLOS_ID'+'"];'+'\n'; 
		yy.dotCST += padre+'--'+$$[$0-1][2]+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		
		$$[$0-1][0].push($$[$0][0]); 
		this.$[0] = $$[$0-1][0]
		var regla = new Regla("GRAMATICAL","ARREGLO_ID-> ARREGLOS_ID ARREGLO_ID","agregar Arreglo_ID a arreglos,\n return arrreglos;"); ingresarRegla(regla);
	
break;
case 49:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'ARREGLOS_ID'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		var regla = new Regla("GRAMATICAL","ARREGLO_ID->  corcheteAbierto OPERACIONES_ARREGLO corcheteCerrado",""); ingresarRegla(regla);
		this.$[0] = [$$[$0][0]];
	
break;
case 50:

		//AST
		this.$[1]=$$[$0-1][1];
		//CST
		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.idCST+' [label="'+'F'+'"];'+'\n';  
		var hijo1 =++yy.idCST;										
		yy.dotCST+= hijo1+' [label="'+'corcheteAbierto'+'"];'+'\n';			 
		var hijo12 =++yy.idCST;										
		yy.dotCST+= hijo12+' [label="'+'['+'"];'+'\n';				
		var hijo2 =++yy.idCST;										
		yy.dotCST+= hijo2+' [label="'+'corcheteCerrado'+'"];'+'\n';			
		var hijo22 =++yy.idCST;										
		yy.dotCST+= hijo22+' [label="'+']'+'"];'+'\n';				

		yy.dotCST +=padre+'--'+hijo1+';'+'\n';						
		yy.dotCST += padre+'--'+$$[$0-1][2]+';'+'\n';	
		yy.dotCST += padre+'--'+hijo2+';'+'\n';						
		yy.dotCST += hijo1+'--'+hijo12+';'+'\n';			
		yy.dotCST += hijo2+'--'+hijo22+';'+'\n';						
		this.$[2]=padre;

		$[0] = new Predicado($$[$0-1][0],_$[$0-2].first_line, _$[$0-2].first_column);	
		var regla = new Regla("GRAMATICAL","ARREGLO_ID->  corcheteAbierto OPERACIONES_ARREGLO corcheteCerrado","return new Predicado"); ingresarRegla(regla);
	
break;
case 51:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'OPERACIONES_ARREGLO'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		this.$[0] = $$[$0][0];
		var regla = new Regla("GRAMATICAL","OPERACIONES_ARREGLO->  OPERACION_LOGICA ","return OPERACION_LOGICA"); ingresarRegla(regla);
	
break;
case 52:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'OPERACIONES_ARREGLO'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0] = $$[$0][0];
		var regla = new Regla("GRAMATICAL","OPERACIONES_ARREGLO->  OPERACION_RELACIONAL ","return OPERACION_RELACIONAL"); ingresarRegla(regla);
	
break;
case 53:

		//AST=
		yy.dotAST += $$[$0-1][1]+'--'+$$[$0-2][1]+';'+'\n';
		yy.dotAST += $$[$0-1][1]+'--'+$$[$0][1]+';'+'\n';
		//CST
		this.$[2]=++yy.idCST;OPERACION_LOGICA
		yy.dotCST+= yy.idCST+' [label="'+'OPERACION_LOGICA'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0-2][2]+';'+'\n';
		yy.dotCST += yy.idCST+'--'+$$[$0-1][2]+';'+'\n';
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0] = new OperacionLogica($$[$0-2][0],$$[$0][0],$$[$0-1][2],_$[$0-2].first_line, _$[$0-2].first_column);
		var regla = new Regla("GRAMATICAL","OPERACION_LOGICA->  OPERACION_RELACIONAL SIMBOLOS_LOGICOS OPERACION_RELACIONAL",""); ingresarRegla(regla);
	
break;
case 54:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS_LOGICOS'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'and1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		this.$[0] = Operador.AND;
		var regla = new Regla("GRAMATICAL","SIMBOLOS_LOGICOS->  and1",""); ingresarRegla(regla);
	
break;
case 55:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS_LOGICOS'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'or1'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0]= Operador.OR;
		var regla = new Regla("GRAMATICAL","SIMBOLOS_LOGICOS->  or1",""); ingresarRegla(regla);
	
break;
case 56:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS_RELACIONALES'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'mayorIgual'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		var regla = new Regla("GRAMATICAL","SIMBOLOS_RELACIONALES->  mayorque",""); ingresarRegla(regla);
	
break;
case 57:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS_RELACIONALES'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'mayorIgual'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		var regla = new Regla("GRAMATICAL","SIMBOLOS_RELACIONALES->  menorque",""); ingresarRegla(regla);
	
break;
case 58:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS_RELACIONALES'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'mayorIgual'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		var regla = new Regla("GRAMATICAL","SIMBOLOS_RELACIONALES->  mayorIgual",""); ingresarRegla(regla);
	
break;
case 59:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS_RELACIONALES'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'menorIgual'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		var regla = new Regla("GRAMATICAL","SIMBOLOS_RELACIONALES->  menorIgual",""); ingresarRegla(regla);
	
break;
case 60:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS_RELACIONALES'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'igual'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		var regla = new Regla("GRAMATICAL","SIMBOLOS_RELACIONALES->  igual",""); ingresarRegla(regla);
	
break;
case 61:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'SIMBOLOS_RELACIONALES'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'diferenteQue'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;
		var regla = new Regla("GRAMATICAL","SIMBOLOS_RELACIONALES->  diferenteQue",""); ingresarRegla(regla);
	
break;
case 62:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'-'+'"];'+'\n'; 
		yy.dotAST += padre+'--'+$$[$0-2][1]+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'OPERACION_ARITMETICA'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'mas'+'"];'+'\n'; 
		var hijo2 =++yy.idCST;
		yy.dotCST+= hijo2+' [label="'+$$[$0-1].yy.text+'"];'+'\n'; 
		yy.dotCST += padre+'--'+$$[$0-2][2]+';'+'\n';
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';
		this.$[2]=padre;

		this.$[0] = new OperacionAritmetica($$[$0-2][0],$$[$0][0],Operador.SUMA,_$[$0-2].first_line, _$[$0-2].first_column);
		var regla = new Regla("GRAMATICAL","OPERACION_ARITMETICA-> OPERACION_ARITMETICA mas T1","crear nodos AST; crear nodos CST; Return nuevaOperacion Aritmetica SUMA;"); ingresarRegla(regla);
	
break;
case 63:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'-'+'"];'+'\n'; 
		yy.dotAST += padre+'--'+$$[$0-2][1]+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'OPERACION_ARITMETICA'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'menos'+'"];'+'\n'; 
		var hijo2 =++yy.idCST;
		yy.dotCST+= hijo2+' [label="'+$$[$0-1].yy.text+'"];'+'\n'; 
		yy.dotCST += padre+'--'+$$[$0-2][2]+';'+'\n';
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';
		this.$[2]=padre;
		this.$[0] = new OperacionAritmetica($$[$0-2][0],$$[$0][0],Operador.RESTA,_$[$0-2].first_line, _$[$0-2].first_column);
		var regla = new Regla("GRAMATICAL","OPERACION_ARITMETICA-> OPERACION_ARITMETICA menos T1","crear nodos AST; crear nodos CST; Return nuevaOperacion Aritmetica RESTA;"); ingresarRegla(regla);
	
break;
case 64:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'OPERACION_ARITMETICA'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		this.$[0] = $$[$0][0];
		var regla = new Regla("GRAMATICAL","OPERACION_ARITMETICA-> T1 ","crear nodos AST; crear nodos CST; Return T1"); ingresarRegla(regla);
	
break;
case 65:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'modulo'+'"];'+'\n'; 
		yy.dotAST += padre+'--'+$$[$0-2][1]+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'T1'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'modulo'+'"];'+'\n'; 
		var hijo2 =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+$$[$0-1].yytext+'"];'+'\n'; 
		yy.dotCST += padre+'--'+$$[$0-2][2]+';'+'\n';
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';
		this.$[2]=padre;
		this.$[0] = new OperacionAritmetica($$[$0-2][0],$$[$0][0],Operador.MODULO,_$[$0-2].first_line, _$[$0-2].first_column);
		var regla = new Regla("GRAMATICAL","T1-> T1 modulo T",""); ingresarRegla(regla);
	
break;
case 66:

		this.$[1]=$$[$0][1];
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'T1'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		var regla = new Regla("GRAMATICAL","T1-> T",""); ingresarRegla(regla);
		$[0] = $$[$0][0];
	
break;
case 67:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'asterisco'+'"];'+'\n'; 
		yy.dotAST += padre+'--'+$$[$0-2][1]+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'T'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'asterisco'+'"];'+'\n'; 
		var hijo2 =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+$$[$0-1].yy.text+'"];'+'\n'; 
		yy.dotCST += padre+'--'+$$[$0-2][2]+';'+'\n';
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';
		this.$[2]=padre;
		var regla = new Regla("GRAMATICAL","T-> T asterisco F ",""); ingresarRegla(regla);
	
break;
case 68:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'dividir'+'"];'+'\n'; 
		yy.dotAST += padre+'--'+$$[$0-2][1]+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;

		var padre =++yy.idCST;
		yy.dotCST+= padre+' [label="'+'T'+'"];'+'\n'; 
		var hijo =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+'dividir'+'"];'+'\n'; 
		var hijo2 =++yy.idCST;
		yy.dotCST+= hijo+' [label="'+$$[$0-1].yy.text+'"];'+'\n'; 
		yy.dotCST += padre+'--'+$$[$0-2][2]+';'+'\n';
		yy.dotCST += padre+'--'+hijo+';'+'\n';
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';
		this.$[2]=padre;

		this.$[0] = new OperacionAritmetica($$[$0-2][0],$$[$0][0],Operador.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column);
		var regla = new Regla("GRAMATICAL","T-> T dividir F",""); ingresarRegla(regla);
	
break;
case 69:

		this.$[1]=$$[$0][1];

		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'T'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0] = $$[$0][0];
		var regla = new Regla("GRAMATICAL","T-> F","devolver nodoAAST, crear NodoCST, devolver F;"); ingresarRegla(regla);
	
break;
case 70:

		
		this.$[1]=$$[$0][1];

		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'F'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
	
		this.$[0] = $$[$0][0];
		var regla = new Regla("GRAMATICAL","F-> TIPOIGUALAR",""); ingresarRegla(regla);
	
break;
case 71:

		//AST
		this.$[1]=$$[$0-1][1];
		//CST
		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.idCST+' [label="'+'F'+'"];'+'\n';  
		var hijo1 =++yy.idCST;										
		yy.dotCST+= hijo1+' [label="'+'parizq'+'"];'+'\n';			 
		var hijo12 =++yy.idCST;										
		yy.dotCST+= hijo12+' [label="'+'('+'"];'+'\n';				
		var hijo2 =++yy.idCST;										
		yy.dotCST+= hijo2+' [label="'+'parder'+'"];'+'\n';			
		var hijo22 =++yy.idCST;										
		yy.dotCST+= hijo22+' [label="'+')'+'"];'+'\n';				

		yy.dotCST +=padre+'--'+hijo1+';'+'\n';						
		yy.dotCST += padre+'--'+$$[$0-1][2]+';'+'\n';	
		yy.dotCST += padre+'--'+hijo2+';'+'\n';						
		yy.dotCST += hijo1+'--'+hijo12+';'+'\n';			
		yy.dotCST += hijo2+'--'+hijo22+';'+'\n';						
		this.$[2]=padre;		
		this.$[0] = $$[$0-1][0];
		var regla = new Regla("GRAMATICAL","F-> parizq OPERACION_ARITMETICA parder",""); ingresarRegla(regla);
	
break;
case 72:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= padre+' [label="'+'TIPO_IGUALAR'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'entero'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new Dato(Number($$[$0][0]), _$[$0].first_line, _$[$0].first_column);
		var regla = new Regla("GRAMATICAL","TIPOIGUALAR-> entero",""); ingresarRegla(regla);
	
break;
case 73:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.padre+' [label="'+'TIPO_IGUALAR'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'decimal'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new Dato(Number($$[$0][0]), _$[$0].first_line, _$[$0].first_column); 
		var regla = new Regla("GRAMATICAL","TIPOIGUALAR-> decimal",""); ingresarRegla(regla);
	
break;
case 74:

		var padre =++yy.idAST;
		yy.dotAST+= padre+' [label="'+'SIMBOLOS'+'"];'+'\n'; 
		var hijo =++yy.idAST;
		yy.dotCST+= hijo+' [label="'+'arroba'+'"];'+'\n'; 

		yy.dotAST += padre+'--'+hijo+';'+'\n';
		yy.dotAST += padre+'--'+$$[$0][1]+';'+'\n';
		this.$[1]=padre;
		
		
		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.idCST+' [label="'+'TIPOIGUALAR'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'arroba'+'"];'+'\n';			// yydotCST += 6 [label='arroba'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+'@'+'"];'+'\n';				// yydotCST += 7 [label='@'];

		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';						//	yydotCST+= 5 -- 4
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotcst+= 6 -- 7
		this.$[2]=padre;

		this.$[0] = new Arroba($$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column); 
		var regla = new Regla("GRAMATICAL","TIPOIGUALAR-> SIGUIENTE_ARROBA",""); ingresarRegla(regla);												//return 5;
	
break;
case 75:

		this.$[1]=++yy.idAST;
		yy.dotAST+= yy.idAST+' [label="'+yytext+'"];'+'\n'; 

		var padre=++yy.idCST;//padre = 5;
		yy.dotCST+= yy.idCST+' [label="'+'TIPO_IGUALAR'+'"];'+'\n';  // yydotCST += 5 [label='TIPOIGUALAR'];
		var hijo =++yy.idCST;										// hijo = 6; 
		yy.dotCST+= hijo+' [label="'+'cadena'+'"];'+'\n';			// yydotCST += 6 [label='cadena'];
		var hijo2 =++yy.idCST;										// hijo2 = 7; 
		yy.dotCST+= hijo2+' [label="'+yy.text+'"];'+'\n';				// yydotCST += 7 [label='@'];
		yy.dotCST +=padre+'--'+hijo+';'+'\n';						//	yydotCST+= 5 -- 6
		yy.dotCST += hijo+'--'+hijo2+';'+'\n';						//	yydotCST+= 6 -- 7
		this.$[2]= padre;

		this.$[0] = new Dato($$[$0][0], _$[$0].first_line, _$[$0].first_column); 
		var regla = new Regla("GRAMATICAL","TIPOIGUALAR-> cadena",""); ingresarRegla(regla);
	
break;
case 76:

		this.$[1]=$$[$0][1];

		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'TIPO_IGUALAR'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0] = $$[$0][0];
		var regla = new Regla("GRAMATICAL","TIPOIGUALAR-> CONSULTAS",""); ingresarRegla(regla);
	
break;
case 77:

		this.$[1]=$$[$0][1];

		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'TIPO_IGUALAR'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';

		this.$[0] = $$[$0][0];
		var regla = new Regla("GRAMATICAL","TIPOIGUALAR-> METODOS",""); ingresarRegla(regla);
	
break;
case 78:

			yy.dotAST += $$[$0-1][1]+'--'+$$[$0-2][1]+';'+'\n';
			yy.dotAST += $$[$0-1][1]+'--'+$$[$0][1]+';'+'\n';
			this.$[1]=padre;
			var padre =++yy.idCST;
			yy.dotCST+= padre+' [label="'+'OPERACION_ARITMETICA'+'"];'+'\n'; 
			var hijo =++yy.idCST;
			yy.dotCST+= hijo+' [label="'+'mas'+'"];'+'\n'; 
			var hijo2 =++yy.idCST;
			yy.dotCST+= hijo2+' [label="'+$$[$0-1].yy.text+'"];'+'\n'; 
			yy.dotCST += padre+'--'+$$[$0-2][2]+';'+'\n';
			yy.dotCST += padre+'--'+hijo+';'+'\n';
			yy.dotCST += padre+'--'+$$[$0][2]+';'+'\n';
			yy.dotCST += hijo+'--'+hijo2+';'+'\n';
			this.$[2]=padre;

			this.$[0] = new OperacionRelacional($$[$0-2][0],$$[$0][0],$$[$0-1][0],_$[$0-2].first_line, _$[$0-2].first_column);
			var regla = new Regla("GRAMATICAL","OPERACION_RELACIONAL->  PERACION_ARITMETICA SIMBOLOS_RELACIONALES OPERACION_ARITMETICA","");
			ingresarRegla(regla);
		
break;
case 79:

		//AST
		this.$[1]=$$[$0][1];
		//CST
		this.$[2]=++yy.idCST;
		yy.dotCST+= yy.idCST+' [label="'+'OPERACION_RELACIONAL'+'"];'+'\n'; 
		yy.dotCST += yy.idCST+'--'+$$[$0][2]+';'+'\n';
		this.$[0] = $$[$0][0];
		var regla = new Regla("GRAMATICAL","OPERACION_RELACIONAL->  OPERACION_ARITMETICA",""); ingresarRegla(regla);
		
break;
}
},
table: [{2:[1,3],3:1,4:2,7:4,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8},{1:[3]},{5:[1,18],6:[1,19]},{1:[2,2],9:$V9},o($Va,[2,4],{10:6,11:7,14:10,8:21,12:$V0,13:$V1,15:$V2,17:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8}),o($Vb,[2,6]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),{11:29,12:$Vc,14:27,16:22,18:$Vd,20:$Ve,21:$Vf,22:28,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr},{11:29,12:$Vc,14:27,16:43,18:$Vd,20:$Ve,21:$Vf,22:28,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr},o($Vb,[2,46],{42:44,43:45,44:$Vs}),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,26]),o($Vb,[2,27]),{1:[2,1]},{2:$Vt,7:47,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8},o($Vb,[2,7]),o($Vb,[2,5]),o($Vb,[2,13]),{19:49,20:$Vu,23:$Vv},o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),o($Vb,[2,19]),o($Vb,[2,20]),o($Vb,[2,21]),{13:[1,52]},{13:[2,29]},{13:[2,30]},{13:[2,31]},{13:[2,32]},{13:[2,33]},{13:[2,34]},{13:[2,35]},{13:[2,36]},{13:[2,37]},{13:[2,38]},{13:[2,39]},{13:[2,40]},o($Vb,[2,14]),o($Vb,[2,47],{43:53,44:$Vs}),o($Vw,[2,49]),{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,45:54,47:55,48:56,59:57,61:58,64:59,65:60,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},o($Va,[2,3],{10:6,11:7,14:10,8:21,12:$V0,13:$V1,15:$V2,17:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8}),{9:$V9},o($Vb,[2,15]),o($Vb,[2,22]),o($Vb,[2,23]),{13:[1,69]},o($Vw,[2,48]),{46:[1,70]},{46:[2,51]},{46:[2,52],49:71,50:[1,72],51:[1,73]},o($VC,[2,79],{52:74,53:[1,77],54:[1,78],55:[1,79],56:[1,80],57:[1,81],58:[1,82],60:$VD,62:$VE}),o($VF,[2,64],{63:$VG}),o($VH,[2,66],{20:$VI,66:$VJ}),o($VK,[2,69]),o($VK,[2,70]),{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,59:86,61:58,64:59,65:60,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},o($VK,[2,72]),o($VK,[2,73]),{19:87,20:$Vu,23:$Vv},o($VK,[2,75]),o($VK,[2,76],{10:6,11:7,14:10,8:21,12:$V0,13:$V1,15:$V2,17:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8}),o($VK,[2,77]),{11:90,12:[1,92],13:[1,93],14:89,20:[1,91],23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:88},o($Vw,[2,50]),{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,48:94,59:57,61:58,64:59,65:60,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},o($VL,[2,54]),o($VL,[2,55]),{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,59:95,61:58,64:59,65:60,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,61:96,64:59,65:60,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,61:97,64:59,65:60,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},o($VL,[2,56]),o($VL,[2,57]),o($VL,[2,58]),o($VL,[2,59]),o($VL,[2,60]),o($VL,[2,61]),{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,64:98,65:60,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,65:99,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},{2:$Vt,7:67,8:5,10:6,11:7,12:$V0,13:$V1,14:10,15:$V2,17:$V3,18:$Vx,22:68,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,30:$Vg,31:$Vh,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,65:100,67:61,68:$Vy,70:$Vz,71:$VA,72:$VB},{60:$VD,62:$VE,69:[1,101]},o($VK,[2,74]),o($Vb,[2,28]),o($Vb,[2,41]),o($Vb,[2,42]),o($Vb,[2,43]),o($Vb,[2,44]),o($Vb,[2,45]),{46:[2,53]},o($VC,[2,78],{60:$VD,62:$VE}),o($VF,[2,62],{63:$VG}),o($VF,[2,63],{63:$VG}),o($VH,[2,65],{20:$VI,66:$VJ}),o($VK,[2,67]),o($VK,[2,68]),o($VK,[2,71])],
defaultActions: {18:[2,1],31:[2,29],32:[2,30],33:[2,31],34:[2,32],35:[2,33],36:[2,34],37:[2,35],38:[2,36],39:[2,37],40:[2,38],41:[2,39],42:[2,40],55:[2,51],94:[2,53]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const {Error} = require('../../Scripts/Errores/Error.js');
	var erroresLexicos = [];
	var variables=[];
	var erroresSintacticos = [];
	var errorSemantico=[];
	

	var erroresLexicos = [];
	var variables=[];
	var erroresSintacticos = [];
	var errorSemantico=[];
	var reglas=[];
	var erroresGramar = [];

	const {Dato} = require("./Scripts/ClasesXpath/Dato");
	const {OperacionAritmetica} = require("./Scripts/ClasesXpath/OperacionAritmetica");
	const {Operador} = require("./Scripts/ClasesXpath/Operador");
	const {OperacionRelacional} = require("./Scripts/ClasesXpath/OperacionRelacional");
	const {OperacionLogica} = require("./Scripts/ClasesXpath/OperacionLogica");
	const {Predicado} = require("./Scripts/ClasesXpath/Predicado");
	const {IdSimple} = require("./Scripts/ClasesXpath/IdSimple");
	const {IdCompuesto} = require("./Scripts/ClasesXpath/IdCompuesto");
	const {SimbolosXpath} = require("./Scripts/ClasesXpath/SimbolosXpath");
	const {TiposXpath} = require("./Scripts/ClasesXpath/TiposXpath");
	const {Metodo} = require("./Scripts/ClasesXpath/Metodo");
	const {Funcion} = require("./Scripts/ClasesXpath/Funcion");
	const {Arroba} = require("./Scripts/ClasesXpath/Arroba");
	const {diagonalDobleC} = require("./Scripts/ClasesXpath/diagonalDobleC");
	const {diagonalSimpleS} = require("./Scripts/ClasesXpath/diagonalSimpleS");
	const {Error} = require('../../../Scripts/Errores/Error.js');
    const {Regla} = require("../../../Scripts/Arboles/Regla");
    //const {ObjetoNodo} = require("../../Scripts/Arboles/ObjetoNodo");
    //const {Atributo} = require("../../Scripts/clasesXML/Atributo");
	//const {Nodo} = require("../../Scripts/clasesXML/Nodo");\
	var AUXid=0;
	
	/*
	define('grammarXPATH',function () {
        return {
            getParser: function () {
                return gramaticaxpath;
            }
        };
    });*/
	const {Error} = require('../../../Scripts/Errores/Error.js');
    const {Regla} = require("../../../Scripts/Arboles/Regla");
    //const {ObjetoNodo} = require("../../Scripts/Arboles/ObjetoNodo");
    //const {Atributo} = require("../../Scripts/clasesXML/Atributo");
	//const {Nodo} = require("../../Scripts/clasesXML/Nodo");\
	var AUXid=0;
		
	function unirErrores(){
		erroresGramar[0]= erroresLexicos ;
		erroresGramar[1]= erroresSintacticos;
		erroresGramar[2]=errorSemantico;
		
		console.log(erroresGramar.length);
		console.log(erroresGramar[0].length+'errores lexicos');
		console.log(erroresGramar[1].length+'errores sintacticos');
		console.log(erroresGramar[2].length +'errores semanticos');
	}

	function ingresarRegla(regla){
		if(reglas.length>0){
			var reglas2=[];
			reglas2.push(regla);
			reglas= reglas2.concat(reglas);
			console.log('agregando regla'+reglas.length+' --- '+regla.getProduccion());
		}else{
			reglas.push(regla);
			console.log('agregando regla'+reglas.length);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

	if (!('idCST' in yy)) {
		yy.idCST = 0;
		yy.dotCST = 'graph{'+'\n';
	}
	if (!('idAST' in yy)) {
		yy.idAST = 0;
		yy.dotAST = 'graph{'+'\n';
	}
	

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'xml1'; 
break;
case 1:return 'utf';
break;
case 2:return 'ascii1';
break;
case 3:return 'version';
break;
case 4:return 'encoding';
break;
case 5:return 63;
break;
case 6:return 51;
break;
case 7:return 50;
break;
case 8:return 24;
break;
case 9:return 25;
break;
case 10:return 26;
break;
case 11:return 27;
break;
case 12:return 31;
break;
case 13:return 30;
break;
case 14:return 32;
break;
case 15:return 33;
break;
case 16:return 35;	
break;
case 17:return 34;
break;
case 18:return 37;
break;
case 19:return 36;
break;
case 20:return 38;
break;
case 21:return 40;
break;
case 22:return 39;
break;
case 23:return 41;
break;
case 24:return 'ptcoma';
break;
case 25:return 13;
break;
case 26:return 68;
break;
case 27:return 69;
break;
case 28:return 44;
break;
case 29:return 46;
break;
case 30:return 56;
break;
case 31:return 55;
break;
case 32:return 54;
break;
case 33:return 53;
break;
case 34:return 57;
break;
case 35:return 58;
break;
case 36:return 21;
break;
case 37:return 12;
break;
case 38:return 60;
break;
case 39:return 62;
break;
case 40:return 20;
break;
case 41:return 15;
break;
case 42:return 17;
break;
case 43:return 66;
break;
case 44:return 'interrogacionC';
break;
case 45:return 18;
break;
case 46:return 6;
break;
case 47:
break;
case 48:
break;
case 49:return 71;
break;
case 50:return 70;
break;
case 51:return 23;
break;
case 52:return 72;
break;
case 53:return 'comilla';
break;
case 54:return 5;
break;
case 55: console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						erroresLexicos.push(new Error( yy_.yylloc._$.first_line ,  yy_.yylloc._$.first_column, 'sintactico','xmldesc', yy_.yytext));
						
break;
}
},
rules: [/^(?:XML\b)/i,/^(?:UTF8\b)/i,/^(?:ASCII\b)/i,/^(?:version\b)/i,/^(?:encoding\b)/i,/^(?:mod\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor_or_self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant_or_self\b)/i,/^(?:descendant\b)/i,/^(?:following_sibling\b)/i,/^(?:following\b)/i,/^(?:parent\b)/i,/^(?:preceding_sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:div\b)/i,/^(?:\?)/i,/^(?:@)/i,/^(?:\|)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaxpath;
exports.Parser = gramaticaxpath.Parser;
exports.parse = function () { return gramaticaxpath.parse.apply(gramaticaxpath, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}